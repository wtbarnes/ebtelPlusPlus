{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ebtel++","text":"<p>ebtel++ is a two-fluid version of the original enthalpy-based thermal evolution of loops (EBTEL) model implemented in C++. This code provides an enhanced description of plasma behavior above roughly 5 MK. Further generic details about EBTEL can be found in the repository for the original IDL code and in the references listed below.</p> <p>The EBTEL model, originally developed by Klimchuk et al. (2008) efficiently computes spatially-averaged, time-dependent plasma parameters ( e.g. temperature,  pressure, density) of dynamically-heated coronal loops. It is often desirable to compute solutions for a large number of coronal loops, but the spatial and temporal scales needed to solve the full 1D-hydrodynamic equations lead to long compute times for even 1D hydrodynamic codes. EBTEL computes quick and accurate solutions for spatially-averaged quantities, allowing efficient insight into how these monolithic structures evolve. Barnes et al. (2016) improved upon this model by extending the treatment to the two-fluid hydrodynamic equations, allowing for differential heating between electrons and ions. Experienced EBTEL users should note the slightly different model for calculating the the c1 parameter during conductive cooling (see Appendix A of Barnes et al., 2016).</p> <p>EBTEL also calculates the differential emission measure (DEM) for both the transition region and the corona. Details regarding this formulation can be found in Klimchuk et al. (2008)</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>To compile ebtel++, first install the following dependencies,</p> <ul> <li>gcc (at least v4.7)<ul> <li>included with OS X as well as most Linux distributions</li> <li>cygwin on Windows</li> </ul> </li> <li>scons<ul> <li><code>pip install scons</code> with PyPI</li> <li><code>conda install scons</code> with Anaconda</li> </ul> </li> <li>boost (at least v1.53)<ul> <li><code>conda install boost</code> with Anaconda</li> <li><code>brew install boost</code> with Homebrew</li> <li><code>sudo port install boost</code> with Macports</li> <li><code>sudo apt-get install libboost-all-dev</code> on Debian Linux</li> <li>from source</li> </ul> </li> </ul> <p>Additionally, if you'd like to run the included tests and examples, you'll need the following Python dependencies, all easily installed with anaconda,</p> <ul> <li>Python</li> <li>numpy</li> <li>matplotlib</li> <li>seaborn</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To download the code from GitHub and compile the code,</p> <pre><code>$ git clone https://github.com/rice-solar-physics/ebtelPlusPlus.git\n$ cd ebtelPlusPlus\n$ scons\n</code></pre> <p>This will create an executable <code>bin/ebtel++.run</code>. To see the available command line parameters,</p> <pre><code>$ bin/ebtel++.run --help\n</code></pre> <p>and to run the executable with the default configuration file <code>config/ebtel.example.cfg.xml</code>,</p> <pre><code>$ bin/ebtel++.run\n</code></pre>"},{"location":"#a-note-on-compiling-against-the-boost-libraries","title":"A Note on Compiling against the <code>boost</code> Libraries","text":"<p>The included <code>scons</code> configuration will do it's best to guess where to find the needed <code>boost</code> headers and how to link against the needed libraries. However, depending on your operating system and or installation method, the locations and names of these libraries can vary. As such, you may find that, when compiling using <code>scons</code>, you get errors like,</p> <pre><code>ld: library not found for -lboost_program_options-mt\n</code></pre> <p>Similarly, you may find that you get runtime errors about not being able to find the needed libraries when running the executable such as,</p> <pre><code>dyld[21052]: Library not loaded: '@rpath/libboost_program_options.dylib'\n  Referenced from: '/home/user/ebtelPlusPlus/bin/ebtel++.run'\n  Reason: tried: '/usr/local/lib/libboost_program_options.dylib' (no such file), '/usr/lib/libboost_program_options.dylib' (no such file)\n[1]    21052 abort      bin/ebtel++.run\n</code></pre> <p>To resolve these issues, there are a number of optional flags that you can pass to <code>scons</code> when compiling the executable. For more information about the available flags, you can run <code>scons -h</code>. Additionally, this GitHub issue may be helpful when debugging compile-time or runtime issues related to correctly compiling and linking against <code>boost</code>.</p> <p>As an example, if you have installed <code>boost</code> with Anaconda in the environment <code>ebtel-env</code> and your Anaconda installation is located at <code>/home/user/anaconda</code>, then you will likely need to pass the following flags to <code>scons</code>,</p> <pre><code>$ scons \\\n   --includepath=/home/user/anaconda/envs/ebtel-env/include \\\n   --libpath=/home/user/anaconda/envs/ebtel-env/lib \\\n   --linkflags=\"-rpath /home/user/anaconda/envs/ebtel-env/lib\" \\\n   --libs=boost_program_options\n</code></pre> <p>If instead you've installed <code>boost</code> in the base Anaconda environment, then you can just drop the <code>envs/ebtel-env</code> portion of each of the above paths. Note that the line breaks are only for readability and are not actually necessary when you compile your code.</p>"},{"location":"#testing","title":"Testing","text":"<p>To install the needed Python dependencies and run the tests,</p> <pre><code>$ pip install -r requirements/requirements-test.txt\n$ pytest\n</code></pre> <p>or run any of the three included examples,</p> <pre><code>$ python examples/ex1.py\n$ python examples/ex2.py\n$ python examples/ex3.py\n</code></pre>"},{"location":"#citation","title":"Citation","text":"<p>If you use ebtel++ in any published work, please include the following citations and mention the use of this code.</p> <ul> <li>Klimchuk et al. (2008)</li> <li>Cargill et al. (2012a)</li> <li>Cargill et al. (2012b)</li> <li>Barnes et al. (2016)</li> </ul> <p>The first three papers detail the original single-fluid EBTEL model while the last paper gives the details of the two-fluid model. In particular, the details of how the two-fluid EBTEL equations are derived can be found in the appendix of Barnes et al. (2016).</p>"},{"location":"configuration/","title":"Configuration","text":"<p>An ebtel++ run is configured by a single XML configuration file. The table below lists all of the input parameters needed for a run. An example configuration file is included in the GitHub repository. The configuration file can be written manually or configured via Python as is done in the included examples.</p> Parameter Type Description total_time <code>float</code> duration of the simulation (in s) tau <code>float</code> timestep (in s); if using adaptive solver, the initial timestep tau_max <code>float</code> maximum allowed timestep (in s) when using adaptive solver loop_length <code>float</code> Loop half-length (in cm) saturation_limit <code>float</code> Flux limiter, f in section 2.1 of Barnes et al. (2016) force_single_fluid <code>bool</code> if True, electron and ion populations forced into equilibrium use_c1_loss_correction <code>bool</code> use correction in Eq. 16 of Cargill et al. (2012a) use_c1_grav_correction <code>bool</code> use correction in Eq. 12 of Cargill et al. (2012a) use_flux_limiting <code>bool</code> impose a flux limiter according to Eq. 22 of Klimchuk et al. (2008) calculate_dem <code>bool</code> if True, do the TR and coronal DEM calculation; increases compute time significantly save_terms <code>bool</code> if True, save heat flux, c_1 parameter, and radiative loss to a separate file <code>&lt;output_filename&gt;.terms</code> use_adaptive_solver <code>bool</code> if True, use adaptive timestep; significantly smaller compute times. In both cases, a Runge-Kutta Cash-Karp integration method is used (see section 16.2 of Press et al. (1992)) output_filename <code>string</code> path to output file adaptive_solver_error <code>float</code> Allowed truncation error in adaptive timestep routine adaptive_solver_safety <code>float</code> Refinement factor, between 0 and 1, used if timestep becomes too large and solution contains NaNs. Especially important for short, infrequently heated loops. Also controls decreases in timestep due to thermal conduction timestep. Suggested value is 0.5 c1_cond0 <code>float</code> Nominal value of c_1 during the conduction phase; see Appendix A of Barnes et al. (2016) c1_rad0 <code>float</code> Nominal value of c_1 during radiative phase; see Eq. 16 of Cargill et al. (2012a) helium_to_hydrogen_ratio <code>float</code> Ratio of helium to hydrogen abundance; used in correction to ion mass, ion equation of state surface_gravity <code>float</code> Surface gravity in units of solar surface gravity; should be set to 1.0 unless using for extra-solar cases radiation <code>string</code> The kind of radiative loss function to use. Must be either \"power_law\" (to use radiative losses of Klimchuk et al. (2008)), \"coronal\" (to use radiative losses computed with coronal abundances), \"photospheric\" (to use radiative losses computed with photospheric abundances), or \"variable\" (to vary the radiative loss function from coronal to photospheric as a function of density and temperature)"},{"location":"configuration/#heating","title":"Heating","text":"<p>The time dependent heating is configured in a separate node. It includes the following parameters,</p> Parameter Type Description partition <code>float</code> partition of heating between electrons and ions, between 0 and 1; 1 is pure electron heating, 0 pure ion heating background <code>float</code> constant background heating (in ergs cm^{-3} s^{-1}) <p>The heating function is constructed by a list of discrete events and should be specified in the following way,</p> <pre><code>&lt;events&gt;\n  &lt;event magnitude=\"0.1\" rise_start=\"0.0\" rise_end=\"50.0\" decay_start=\"50.0\" decay_end=\"100.0\"/&gt;\n  &lt;event magnitude=\"0.05\" rise_start=\"1000.0\" rise_end=\"1250.0\" decay_start=\"1350.0\" decay_end=\"1450.0\"/&gt;\n&lt;/events&gt;\n</code></pre> <p>Here, we've configured two separate heating events. The first starts at 0 seconds, rises linearly to a maximum heating rate of 0.1 erg cm^{-3} s^{-1} in 50 seconds, and then immediately falls off with the event concluding at 100 seconds, i.e. a triangular heating profile. The second starts at 1000 seconds, rises to a maximum heating rate of 0.05 erg cm^{-3} s^{-1} in 250 seconds, is sustained at 0.05 for 100 seconds and then the event concludes at 1450 seconds.</p> <p>Using this format, it is easy to specify either symmetric or asymmetric events of many different shapes. For more examples, see the example configuration file or the included examples.</p>"},{"location":"configuration/#differential-emission-measure","title":"Differential Emission Measure","text":"<p>Optionally, ebtel++ can can also calculate the differential emission measure (DEM) in both the transition region and the corona. See sections 2.2 and 3 of Klimchuk et al. (2008) for the details of this calculation. To enable this calculation, set <code>calculate_dem</code> to <code>True</code> in the configuration file (as described above). Note that this will result in much longer computation times.</p> <p>If <code>calculate_dem</code> is set to <code>True</code>, ebtel++ will read in the <code>dem</code> node from the configuration file which should be structured as follows,</p> <pre><code>&lt;dem&gt;\n  &lt;use_new_method&gt;True&lt;/use_new_method&gt;\n  &lt;temperature bins=\"451\" log_min=\"4\" log_max=\"8.5\"/&gt;\n&lt;/dem&gt;\n</code></pre> <p>If <code>use_new_method</code> is set to True (False), the transition region DEM is calculated using the method outlined in section 3 (the appendix) of Klimchuk et al. (2008). The <code>temperature</code> node configures the range and number of bins used when calculating the DEM. Here, for example, there are 450 bins of equal width between 10^4 and 10^{8.5} K.</p> <p>If you do not need to calculate the DEM, set the <code>calculate_dem</code> parameter to False and this section of the configuration file need not be included.</p>"},{"location":"configuration/#output","title":"Output","text":"<p>Once the EBTEL run has finished, the results are printed to the file specified in <code>output_filename</code> in the configuration file (as described above). Several examples of how to parse the results in Python can be found here. In general, the results file follows the structure,</p> t_0 T_e(t_0) T_i(t_0) n(t_0) p_e(t_0) p_i(t_0) v(t_0) h(t_0) ... ... ... ... ... ... ... ... t_i T_e(t_i) T_i(t_i) n(t_i) p_e(t_i) p_i(t_i) v(t_i) h(t_i) ... ... ... ... ... ... ... ... t_{N-1} T_e(t_{N-1}) T_i(t_{N-1}) n(t_{N-1}) p_e(t_{N-1}) p_i(t_{N-1}) v(t_{N-1}) h(t_{N-1}) <p>Here t is the time, T_e is the electron temperature, T_i is the ion temperature, p_e is the electron pressure, p_i is the ion pressure, n is the density, v is the velocity, and h is the heating rate.</p> <p>If <code>calculate_dem</code> is set to True, the TR and coronal DEM results are printed to <code>&lt;output_filename&gt;.dem_tr</code> and <code>&lt;output_filename&gt;.dem_corona</code>, respectively. These output files are structured in the following way,</p> T_0 ... T_j ... T_{M-1} DEM(t_0,T_0) ... DEM(t_0,T_j) ... DEM(t_0,T_{M-1}) ... ... ... ... ... DEM(t_i,T_0) ... DEM(t_i,T_j) ... DEM(t_i,T_{M-1}) ... ... ... ... ... DEM(t_{N-1},T_0) ... DEM(t_{N-1},T_j) ... DEM(t_{N-1},T_{M-1}) <p>where M is the number of temperature bins and N is again the number of timesteps.</p>"},{"location":"examples/","title":"Examples","text":"<p>Included below are a few examples of how to run <code>ebtel++</code> and plot the results using Python. The results files can be parsed very easily by any language (e.g. IDL,Matlab). Configuration files can also be easily manipulated by hand, but in practice, particularly when computing many EBTEL runs, it is better to script this. The util.py script provides several convenient utilities for manipulating these configuration files.</p>"},{"location":"examples/#electron-heating","title":"Electron Heating","text":"<p>In this example, only the electrons are heated by a single triangular pulse lasting 500 seconds and injecting 10 ergs per cubic centimeter into the loop plasma. The code used to make this figure can be found here.</p> <p></p>"},{"location":"examples/#ion-heating","title":"Ion Heating","text":"<p>In this second example, only the ions are heated. In this case, we heat the ions with five distinct pulses, each lasting 200 seconds and separated by about 2000 seconds. The energies are uniformly distributed between 0.001 and 0.1 ergs per cubic centimeter per second. The example code can be found here. Note how easy it is to programmatically generate the configurations for these different heating profiles.</p> <p></p>"},{"location":"examples/#single-fluid","title":"Single Fluid","text":"<p>Lastly, we show an example where the electron and ion populations are forced into equilibrium at all times, i.e. the single-fluid case. The loop plasma is heated by a single pulse lasting 2000 seconds that rises quickly (in 250 seconds), is sustained at 0.005 ergs per cubic centimeter per second for 750 seconds, and then decays back to the background value over 1000 seconds. The example code can be found here.</p> <p></p>"}]}